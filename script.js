// 1. Дан код:
// var a = 1, b = 1, c, d;
// c = ++a; alert(c);           // 2
// потому что ++a - сначала выполним a = a + 1 потом выведем a
// d = b++; alert(d);           // 1
// потому что b++ - сначала выведем b потом выполним b = b + 1
// c = (2+ ++a); alert(c);      // 5 увеличиваем переменную на 2 при этом сразу увеличиваем a
// d = (2+ b++); alert(d);      // 4 увеличиваем переменную на 2 но b сначала учитываем а уже потом инкрементируем
// alert(a);                    // 3 потому что в предыдущих строках ++ стояло или до или после переменной
// alert(b);                    // 3 потому что в предыдущих строках ++ стояло или до или после переменной
// Почему код даёт именно такие результаты?


//     2. Чему будет равен x в примере ниже?
// var a = 2;
// var x = 1 + (a *= 2); - другим кодом это 1 + (a * 2)
// 5

// 3. Объявить две целочисленные переменные a и b и задать им произвольные начальные значения.
// Затем написать скрипт, который работает по следующему принципу:
// если a и b положительные, вывести их разность;
// если а и b отрицательные, вывести их произведение;
// если а и b разных знаков, вывести их сумму; ноль можно считать положительным числом.

let a = 2, b = 7;

if(a >= 0 && b >= 0)
   alert(`Числа a=${a} и b=${b} оба положительные a-b=${a-b}`);
else if ( a <= 0 && b <= 0 )
   alert(`Числа a=${a} и b=${b} оба отрицательные a*b=${a*b}`);
else
   alert(`Числа a=${a} и b=${b} разных знаков a+b=${a+b}`);


// 4. Присвоить переменной а значение в промежутке [0..15].
// С помощью оператора switch организовать вывод чисел от a до 15.
// оставим а с прошлой задачи, оч прикольная задачка
a = Math.floor(Math.random() * 16);
str = '';
switch (a) {
    case 0:
        str += '0 '
    case 1:
        str += '1 '
    case 2:
        str += '2 '
    case 3:
        str += '3 '
    case 4:
        str += '4 '
    case 5:
        str += '5 '
    case 6:
        str += '6 '
    case 7:
        str += '7 '
    case 8:
        str += '8 '
    case 9:
        str += '9 '
    case 10:
        str += '10 '
    case 11:
        str += '11 '
    case 12:
        str += '12 '
    case 13:
        str += '13 '
    case 14:
        str += '14 '
    case 15:
        str += '15'
}
alert(`а=${a} результат:\n${str}`);

// 5. Реализовать основные 4 арифметические операции в виде функций
// с двумя параметрами. Обязательно использовать оператор return.

// const a = prompt('Введите первую переменную:');
// const b = prompt('Введите вторую переменную:');
const  a = 2;
const  b = 3;

function my_addition(a, b) {
	return a + b;
}
function my_subtraction(a, b) {
	return a - b;
}
function my_multiplication(a, b) {
	return a * b;
}
function my_division(a, b) {
	return a / b;
}

alert (`Сложение чисел ${a} и ${b} равно ${my_addition(a,b)}`)
alert (`Вычитание чисел ${a} и ${b} равно ${my_subtraction(a,b)}`)
alert (`Умножение чисел ${a} и ${b} равно ${my_multiplication(a,b)}`)
alert (`Деление чисел ${a} и ${b} равно ${my_division(a,b)}`)

// 6. Реализовать функцию с тремя параметрами: function mathOperation(arg1, arg2, operation),
// где arg1, arg2 – значения аргументов, operation – строка с названием операции.
// В зависимости от переданного значения операции выполнить одну из арифметических операций
// (использовать функции из пункта 5) и вернуть полученное значение (использовать switch).

function mathOperation(arg1, arg2, operation){
    switch (operation) {
		case 'сложение':
			return my_addition(arg1,arg2);
			break;
		case 'вычитание':
			return my_subtraction(arg1,arg2);
			break;
		case 'умножение':
			return my_multiplication(arg1,arg2);
			break;
		case 'деление':
			return my_division(arg1,arg2);
			break;

    }
}

alert(mathOperation(2,3,'сложение'));
alert(mathOperation(2,3,'вычитание'));
alert(mathOperation(2,3,'умножение'));
alert(mathOperation(2,3,'деление'));

// 7. *Сравнить null и 0. Попробуйте объяснить результат.
// alert( null > 0 );  // (1) false
// alert( null == 0 ); // (2) false
// alert( null >= 0 ); // (3) true
// Много что прочитал но тут наиболее точно описано. чесно гря все равно не привычно.
// хотя уже кажись понимаю почему это логично.
// Причина в том, что нестрогое равенство и сравнения > < >= <= работают по-разному.
// Сравнения преобразуют null в число, рассматривая его как 0.
// Поэтому выражение (3) null >= 0 истинно, а null > 0 ложно.
//
// С другой стороны, для нестрогого равенства == значений undefined и null
// действует особое правило: эти значения ни к чему не приводятся,
// они равны друг другу и не равны ничему другому. Поэтому (2) null == 0 ложно.

// кстати оч понравилось(хотя тут проще):
// let a = 0;
// alert( Boolean(a) ); // false
// let b = "0";
// alert( Boolean(b) ); // true
// alert(a == b); // true!
// и
// alert(2 + 2 + '1' ); // будет "41", а не "221"


// 8. *С помощью рекурсии организовать функцию возведения числа в степень.
//     Формат: function power(val, pow), где val – заданное число, pow – степень.
// в методичке очень детально показан код фибоначи в решении рекурсии
// там переделать ничего особенного. рекурсия еще алгоритмах по питону была такая задача
// так что решил не копипастить :)))
// если не трудно дайте задачку по Вашему вкусу, на мышление по курсу.